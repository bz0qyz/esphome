substitutions:
  device_name: "shelly-2pm-relay"
  friendly_device_name: "Shelly 2PM Relay"
  device_area: ""
  # relay switch gpio
  relay1_name: "Relay Switch 1"
  relay1_icon: "mdi:lihtbulb"
  relay1_pin: GPIO12
  relay2_name: "Relay Switch 2"
  relay2_icon: "mdi:lighbulb"
  relay2_pin: GPIO13
  # manual switch gpio
  switch1_name: "Control Switch 1"
  switch1_pin: GPIO5
  switch2_name: "Control Switch 2"
  switch2_pin: GPIO18
  # Other gpio
  temp_sensor_pin: GPIO35
  # Relay trip limits
  max_power: "3600.0"
  max_temp: "80.0"
  # I2C pins
  sda_pin: GPIO26
  scl_pin: GPIO25

packages:
  diagnostic-entities: !include ../common/diagnostic-entities.yaml

esphome:
  name: ${device_name}
  friendly_name: ${friendly_device_name}
  area: ${device_area}

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  level: DEBUG
api:
ota:
  - platform: esphome
    id: ota_esphome
wifi:
  ap:
captive_portal:

time:
  - platform: homeassistant

i2c:
  sda: ${sda_pin}
  scl: ${scl_pin}

output:
  - platform: gpio
    id: relay1_output
    pin: ${relay1_pin}
  - platform: gpio
    id: relay2_output
    pin: ${relay2_pin}

light:
  - platform: binary
    id: relay1_light
    name: "${relay1_name}"
    icon: "${relay1_icon}"
    output: relay1_output
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: binary
    id: relay2_light
    name: "${relay2_name}"
    icon: "${relay2_icon}"
    output: relay2_output
    restore_mode: RESTORE_DEFAULT_OFF

button:
  # - platform: factory_reset
  #   name: Restart with Factory Default Settings
  - platform: restart
    name: Restart
    entity_category: "DIAGNOSTIC"


binary_sensor:
  # Button on device
  - platform: gpio
    name: "${device_name} Button"
    pin:
      number: GPIO4
      inverted: yes
      mode:
        input: true
        pullup: true
    internal: true

  # Input 1
  - platform: gpio
    id: input_switch1
    name: "${switch1_name}"
    pin: ${switch1_pin}
    internal: true
    filters:
      - delayed_on_off: 50ms
    on_state:
      then:
        - light.toggle: relay2_light

  # Input 2
  - platform: gpio
    id: input_switch2
    name: "${switch2_name}"
    pin: ${switch2_pin}
    internal: true
    filters:
      - delayed_on_off: 50ms
    on_state:
      then:
        - light.toggle: relay2_light

sensor:
  # Uptime sensor.
  - platform: uptime
    name: "${device_name} Uptime"
    entity_category: 'diagnostic'
    update_interval: 300s

  # Power Sensor Monitors
  - platform: ade7953_i2c
    irq_pin: GPIO27
    voltage:
      name: "${device_name} Voltage"
      entity_category: 'diagnostic'
    current_a:
      name: "${relay2_name} Current"
      entity_category: 'diagnostic'
    current_b:
      name: "${relay1_name} Current"
      entity_category: 'diagnostic'

    active_power_a:
      name: "${relay2_name} Power"
      id: power_channel_2
      entity_category: 'diagnostic'
      # active_power_a is is inverted, so multiply by -1
      filters:
        - multiply: -1
      on_value_range:
        - above: ${max_power}
          then:
            - light.turn_off: relay2_light
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: "Message from ${friendly_device_name}"
                data_template:
                  message: "${relay2_name} turned off because power exceeded ${max_power}W"

    active_power_b:
      name: "${relay1_name} Power"
      id: power_channel_1
      entity_category: 'diagnostic'
      # active_power_b is inverted, so multiply by -1
      filters:
        - multiply: -1
      on_value_range:
        - above: ${max_power}
          then:
            - light.turn_off: relay1_light
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: "Message from ${friendly_device_name}"
                data_template:
                  message: "${relay1_name} turned off because power exceeded ${max_power}W"
    update_interval: 30s

  - platform: total_daily_energy
    name: "${relay1_name} Daily Energy"
    power_id: power_channel_1
  - platform: total_daily_energy
    name: "${relay2_name} Daily Energy"
    power_id: power_channel_2

  # Internal NTC Temperature sensor
  - platform: ntc
    sensor: temp_resistance_reading
    name: "${device_name} Temperature"
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    entity_category: 'diagnostic'
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - light.turn_off: relay1_light
          - light.turn_off: relay2_light
          - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: "Message from ${friendly_device_name}"
                data_template:
                  message: "${relay1_name} and ${relay1_name} turned off because temperature exceeded ${max_temp}°C"

  # Required for NTC sensor
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 10kOhm

  # Required for NTC sensor
  - platform: adc
    id: temp_analog_reading
    pin: ${temp_sensor_pin}
    attenuation: 12db
    update_interval: 60s
