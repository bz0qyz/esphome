---
substitutions:
  device_name: "reptile-enclosure"
  friendly_device_name: "Reptile Enclosure"
  # the timezone for ntp_time
  timezone: "America/Chicago"
  # relay switch gpio for Day
  relay_day_name: "Day"
  relay_day_icon: "mdi:weather-sunny"
  relay_day_sorting_weight: "1"
  relay_day_pin: GPIO2
  # relay switch gpio for Night
  relay_night_name: "Night"
  relay_night_icon: "mdi:weather-night"
  relay_night_sorting_weight: "1"
  relay_night_pin: GPIO3
  # light gpio
  light_status_name: "Status"
  light_status_pin: GPIO10
  light_status_brightness: "40"
  # Temperature and Humidity AM2120
  dht_sensor_pin: GPIO09
  temperature_unit: "째C"
  temp_sorting_weight: "6"
  humidity_sorting_weight: "7"
  #  temperature_unit: "째F"
  # Mist Motor relay. TIP120
  mist_pump_pin: GPIO1
  # run modes
  mode_sun: "Sunrise/Sunset"
  mode_time: "Time"
  mode_manual: "Manual"
  mode_sorting_weight: "9"

  # System
  uptime_sorting_weight: "10"
  time_sync_sorting_weight: "1"
  # Light
  sun_elevation_sorting_weight: "3"
  sun_sunrise_sorting_weight: "4"
  sun_sunset_sorting_weight: "5"
  sun_daytime_sorting_weight: "2"
  # Time
  day_start_sorting_weight: "10"
  night_start_sorting_weight: "11"
  # Mist
  mist_pump_sorting_weight: "5"
  mist_last_sorting_weight: "6"
  mist_duration_sorting_weight: "12"
  mist_humidity_sorting_weight: "13"
  mist_timer_sorting_weight: "14"
  mist_light_change_sorting_weight: "15"
  mist_humidity_sorting_weight: "13"


packages:
  diagnostic-entities: !include ../common/diagnostic-entities.yaml

esphome:
  name: ${device_name}
  friendly_name: ${friendly_device_name}
  min_version: 2024.6.0

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:
  level: DEBUG
api:
ota:
  - platform: esphome
    id: ota_esphome
wifi:
  ap:
captive_portal:

web_server:
  id: !extend the_web_server
  version: 3
  sorting_groups:
    # Sensor and Control
    - id: light_controls
      name: "Light Controls"
      sorting_weight: 1
    - id: mist_controls
      name: "Mist Controls"
      sorting_weight: 2
    - id: environment_sensors
      name: "Environment Sensors"
      sorting_weight: 3
    # Configuration
    - id: light_configuration
      name: "Light Configuration"
      sorting_weight: 1
    - id: mist_configuration
      name: "Mist Configuration"
      sorting_weight: 2
    # Diagnostic
    - id: system_diagnostic
      name: "System Diagnostic"
      sorting_weight: 1
    - id: light_diagnostic
      name: "Light Diagnostic"
      sorting_weight: 2
    - id: mist_diagnostic
      name: "Mist Diagnostic"
      sorting_weight: 3


time:
  - platform: sntp
    id: ntp_time
    timezone: ${timezone}
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time_sync:
      then:
        - logger.log:
            format: "Time Synchronized updating sunrise and sunset"
            level: INFO

select:
  - platform: template
    name: "Light Mode"
    id: light_run_mode
    restore_value: True
    optimistic: True
    icon: "mdi:auto-mode"
    entity_category: "CONFIG"
    web_server:
      sorting_group_id: light_configuration
      sorting_weight: ${mode_sorting_weight}
    options:
      - "${mode_sun}"
      - "${mode_time}"
      - "${mode_manual}"
    on_value:
      then:
        - logger.log:
            format: "Light Mode changed to: %s (index %d)"
            args: ["x.c_str()", "i"]
            level: INFO

datetime:
  - platform: template
    id: day_start
    name: "Time: Day Start"
    icon: "mdi:weather-sunset-up"
    type: time
    optimistic: True
    restore_value: True
    web_server:
      sorting_group_id: light_configuration
      sorting_weight: ${day_start_sorting_weight}
    entity_category: "CONFIG"

  - platform: template
    id: night_start
    name: "Time: Day End"
    icon: "mdi:weather-sunset-down"
    type: time
    optimistic: True
    restore_value: True
    web_server:
      sorting_group_id: light_configuration
      sorting_weight: ${night_start_sorting_weight}
    entity_category: "CONFIG"

  - platform: template
    id: last_mist_time
    name: "Last Mist Time"
    type: datetime
    entity_category: "DIAGNOSTIC"
    disabled_by_default: True
    optimistic: True
    restore_value: True
    update_interval: never
    web_server:
      sorting_group_id: mist_diagnostic
      sorting_weight: ${mist_last_sorting_weight}

number:
  - platform: template
    id: mist_duration
    name: "Mist duration (sec)"
    icon: "mdi:sprinkler-fire"
    mode: "slider"
    min_value: 1
    max_value: 20
    step: 1
    optimistic: True
    restore_value: True
    entity_category: "CONFIG"
    web_server:
      sorting_group_id: mist_configuration
      sorting_weight: ${mist_duration_sorting_weight}
  - platform: template
    id: auto_mist_humidity
    name: "Humidity Mist Threshold (%)"
    icon: "mdi:sprinkler-fire"
    mode: "slider"
    device_class: "HUMIDITY"
    min_value: 10
    max_value: 100
    step: 5
    optimistic: True
    restore_value: True
    entity_category: "CONFIG"
    web_server:
      sorting_group_id: mist_configuration
      sorting_weight: ${mist_humidity_sorting_weight}
  - platform: template
    id: auto_mist_timer
    name: "Auto-mist delay timer (min)"
    icon: "mdi:timer"
    mode: "box"
    min_value: 1
    max_value: 1440
    step: 1
    optimistic: True
    restore_value: True
    entity_category: "CONFIG"
    web_server:
      sorting_group_id: mist_configuration
      sorting_weight: ${mist_timer_sorting_weight}

switch:
  - platform: template
    id: auto_humidity_mist
    name: "Mist on Low Humidity"
    icon: "mdi:sprinkler-fire"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: "CONFIG"
    web_server:
      sorting_group_id: mist_configuration
      sorting_weight: ${mist_humidity_sorting_weight}
  - platform: template
    id: auto_light_change_mist
    name: "Mist on Light Change"
    icon: "mdi:sprinkler-fire"
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: "CONFIG"
    web_server:
      sorting_group_id: light_configuration
      sorting_weight: ${mist_light_change_sorting_weight}
  - platform: gpio
    id: mist_pump
    name: "Mister"
    icon: "mdi:sprinkler-fire"
    web_server:
      sorting_group_id: mist_controls
      sorting_weight: ${mist_pump_sorting_weight}
    pin:
      number: ${mist_pump_pin}
      inverted: True
    on_turn_on:
      - logger.log:
          format: "Starting Mist for %.0f seconds"
          args: ['id(mist_duration).state']
          level: INFO
      - light.control:
          id: light_status
          effect: "mist pulse"
      - light.turn_on:
          id: light_status
          flash_length: !lambda 'return (id(mist_duration).state * 1000);'
      - delay: !lambda |-
                float seconds = id(mist_duration).state;
                int milliseconds = (int) (seconds * 1000);  // Convert seconds to milliseconds
                return milliseconds;  // Return the value in milliseconds
      - light.control:
          id: light_status
          effect: "none"
      - logger.log:
          format: "Mist Complete"
          level: INFO
      - switch.turn_off: mist_pump
      - datetime.datetime.set:
          id: last_mist_time
          datetime: !lambda |-
            return id(ntp_time).now();

sun:
  id: sun_sun
  latitude: 33.0142765째
  longitude: -97.025589째


output:
  - platform: gpio
    id: "relay_day_output"
    pin: ${relay_day_pin}
    inverted: True
  - platform: gpio
    id: "relay_night_output"
    pin: ${relay_night_pin}
    inverted: True

light:
  - platform: esp32_rmt_led_strip
    chipset: WS2812
    pin: ${light_status_pin}
    rmt_channel: 0
    num_leds: 1
    rgb_order: GRB
    name: "${light_status_name}"
    id: light_status
    internal: True
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - flicker:
      - random:
      - pulse:
      - pulse:
          name: "mist pulse"
          max_brightness: "${light_status_brightness}%"
          transition_length: 0.5s
          update_interval: 0.5s
      - strobe

  - platform: binary
    id: light_day
    name: "${relay_day_name}"
    output: "relay_day_output"
    icon: "${relay_day_icon}"
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_group_id: light_controls
      sorting_weight: ${relay_day_sorting_weight}
    on_turn_on:
      then:
        - logger.log:
            format: "Day Mode On"
            level: INFO
        - light.turn_off: light_night
        - delay: 500ms
        - light.turn_on:
            id: light_status
            transition_length: 300ms
            brightness: "${light_status_brightness}%"
            color_mode: RGB
            red: 100%
            green: 54.9%
            blue: 0%
    on_turn_off:
      then:
        - light.turn_off:
            id: light_status
            transition_length: 100ms


  - platform: binary
    id: light_night
    name: "${relay_night_name}"
    output: "relay_night_output"
    icon: "${relay_night_icon}"
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_group_id: light_controls
      sorting_weight: ${relay_night_sorting_weight}
    on_turn_on:
      then:
        - logger.log:
            format: "Night Mode On"
            level: INFO
        - light.turn_off: light_day
        - delay: 500ms
        - light.turn_on:
            id: light_status
            transition_length: 300ms
            brightness: "${light_status_brightness}%"
            color_mode: RGB
            red: 10%
            green: 0%
            blue: 90%
    on_turn_off:
      then:
        - light.turn_off:
            id: light_status
            transition_length: 100ms

button:
  - id: !extend restart_button
    web_server:
      sorting_group_id: system_diagnostic
      sorting_weight: 11

sensor:
  - id: !extend uptime_sensor
    web_server:
      sorting_group_id: system_diagnostic
      sorting_weight: ${uptime_sorting_weight}

  - platform: sun
    name: Sun Elevation
    type: elevation
    update_interval: 60s
    entity_category: "DIAGNOSTIC"
    web_server:
      sorting_group_id: light_diagnostic
      sorting_weight: ${sun_elevation_sorting_weight}

  - platform: dht
    id: dht_sensor
    model: AM2120
    pin: ${dht_sensor_pin}
    update_interval: 300s
    temperature:
      name: "Temperature"
      icon: "mdi:thermometer"
      unit_of_measurement: ${temperature_unit}
      web_server:
        sorting_group_id: environment_sensors
        sorting_weight: ${temp_sorting_weight}
      filters:
        - delta: 1.0
        - lambda: |-
            if ("${temperature_unit}" == "째F") {
              ESP_LOGI("temp", "Converting Temperature to Fahrenheit: %.0f.", x);
              return x * 9.0 / 5.0 + 32.0;
            } else {
              return x;
            }
      on_value:
        then:
          - logger.log:
              format: "Temperature Change Detected: %.1f"
              args: ['x']
              level: INFO
    humidity:
      name: "Humidity"
      icon: "mdi:water-percent"
      web_server:
        sorting_group_id: environment_sensors
        sorting_weight: ${humidity_sorting_weight}
      filters:
        - delta: 1.0
      on_value:
        then:
          - logger.log:
              format: "Humidity Change Detected: %.1f"
              args: ['x']
              level: INFO
          - if:
              condition:
                - lambda: |-
                    if (id(auto_mist_humidity).state > x) {
                      return true;
                    } else {
                      return false;
                    }
              then:
                - logger.log:
                    format: "Current Humidity: %.0f is below threshold: %.0f"
                    args: [ 'x', 'id(auto_mist_humidity).state' ]
                    level: WARN
                - if:
                    condition:
                      - lambda: 'return id(auto_humidity_mist).state;'
                      - lambda: 'return id(can_do_mist).state;'
                    then:
                      - switch.turn_on: mist_pump
                    else:
                      - logger.log:
                          format: "Not misting since auto-mist is disabled or the auto-mist delay has not passed."
                          level: WARN

text_sensor:
  - platform: sun
    id: next_sunrise
    name: "Next Sunrise"
    type: sunrise
    update_interval: 60s
    entity_category: "DIAGNOSTIC"
    web_server:
      sorting_group_id: light_diagnostic
      sorting_weight: ${sun_sunrise_sorting_weight}

  - platform: sun
    id: next_sunset
    name: "Next Sunset"
    type: sunset
    update_interval: 60s
    entity_category: "DIAGNOSTIC"
    web_server:
      sorting_group_id: light_diagnostic
      sorting_weight: ${sun_sunset_sorting_weight}

binary_sensor:
  - platform: template
    name: "NTP Time Sync"
    id: snmp_time_is_valid
    icon: "mdi:web-clock"
    entity_category: DIAGNOSTIC
    web_server:
      sorting_group_id: system_diagnostic
      sorting_weight: ${time_sync_sorting_weight}
    lambda: 'return id(ntp_time).now().is_valid();'

  - platform: template
    id: can_do_mist
    name: "Auto-mist Allowed"
    disabled_by_default: True
    entity_category: DIAGNOSTIC
    lambda: |-
      if (id(uptime_sensor).state < 10) { return false; }
      ESPTime now = id(ntp_time).now();
      ESPTime last_mist = id(last_mist_time).state_as_esptime();
      int delta_allowed = ((id(auto_mist_timer).state * 60) + 3600);
      int delta_seconds = (now.timestamp - last_mist.timestamp);
      //ESP_LOGI("mist", "delta allowed: %i. delta: %i", delta_allowed, delta_seconds);
      return (delta_seconds > delta_allowed);
    on_press:
      then:
        - logger.log:
                format: "Auto-Mist enabled"
                level: INFO
    on_release:
      then:
        - logger.log:
                format: "Auto-Mist Disabled for %.0f minute(s)."
                args: ['id(auto_mist_timer).state']
                level: INFO
  - platform: template
    name: "Day Time"
    id: is_day_time
    icon: "mdi:sun-clock"
    entity_category: DIAGNOSTIC
    web_server:
      sorting_group_id: light_diagnostic
      sorting_weight: ${sun_daytime_sorting_weight}
    lambda: |-
      // Verify that the light mode is automatic
      if (id(light_run_mode).state == "${mode_manual}") {
        if(id(light_day).current_values.is_on()) { return true;}
        if(id(light_night).current_values.is_on()) { return false;}
        return false;
      } else {
        // Verify that NTP time is in sync
        if (! id(ntp_time).now().is_valid()) {
          return false;
        } else {
          // use sunrise/sunset from sun if mode_sun
          if (id(light_run_mode).state == "${mode_sun}") {
              auto now = id(ntp_time).now();
              auto sunrise_obj = id(sun_sun).sunrise(-0.833);
              auto sunset_obj = id(sun_sun).sunset(-0.833);

              int current_time = now.hour * 60 + now.minute;  // Current time in minutes since midnight
              int day_time = (sunrise_obj.value().hour * 60) + sunrise_obj.value().minute;
              int night_time = (sunset_obj.value().hour * 60) + sunset_obj.value().minute;

              // Return true if the current time is between day_time and night_time
              return (current_time >= day_time && current_time < night_time);
          }
          // calculate if set by time input
          if (id(light_run_mode).state == "${mode_time}") {
              auto now = id(ntp_time).now();
              int current_time = now.hour * 60 + now.minute;  // Current time in minutes since midnight

              // Get the sunrise time from datetime component
              auto day_time_obj = id(day_start).state_as_esptime();
              int day_time = (day_time_obj.hour * 60) + day_time_obj.minute;

              // Get the sunset time from datetime component
              auto night_time_obj = id(night_start).state_as_esptime();
              int night_time = (night_time_obj.hour * 60) + night_time_obj.minute;

              // Return true if the current time is between open_time and close_time
              return (current_time >= day_time && current_time < night_time);
          } else { return false; }
        }
      }

    #----------------------------------------------------------------------------------
    # Automation to control the lights based on the time
    #----------------------------------------------------------------------------------
    on_press:
      then:
        - logger.log:
                format: "Day Time Mode Activated"
                level: INFO
        - light.turn_on: light_day
        # Run mister if auto_light_change_mist is enabled
        - if:
            condition:
              - lambda: 'return id(auto_light_change_mist).state;'
              - lambda: 'return id(can_do_mist).state;'

            then:
              - switch.turn_on: mist_pump
    on_release:
      then:
        - logger.log:
                format: "Night Time Mode Activated"
                level: INFO
        - light.turn_on: light_night
        # Run mister if auto_light_change_mist is enabled
        - if:
            condition:
              - lambda: 'return id(auto_light_change_mist).state;'
              - lambda: 'return id(can_do_mist).state;'
            then:
              - switch.turn_on: mist_pump
